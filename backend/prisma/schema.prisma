generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model deliveries {
  order_id          Int                   @unique
  delivery_agent_id Int
  delivery_status   delivery_status_enum? @default(assigned)
  assigned_at       DateTime?             @default(now()) @db.Timestamp(6)
  picked_up_at      DateTime?             @db.Timestamp(6)
  delivered_at      DateTime?             @db.Timestamp(6)
  delivery_rating   Decimal?              @db.Decimal(2, 1)
  delivery_address  String                @db.VarChar(255)
  delivery_agent    delivery_agent        @relation(fields: [delivery_agent_id], references: [agent_id], onDelete: Cascade, onUpdate: NoAction)
  orders            orders                @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model delivery_agent {
  agent_id         Int                @id @default(autoincrement())
  agent_name       String             @db.VarChar(100)
  agent_email      String             @unique @db.VarChar(45)
  phone_number     String             @unique @db.VarChar(12)
  status           agent_status_enum? @default(offline)
  vehicle          vehicle_enum
  total_deliveries Int?               @default(0)
  rating           Decimal?           @db.Decimal(2, 1)
  joined_at        DateTime?          @default(now()) @db.Timestamp(6)
  deliveries       deliveries[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model menu {
  menu_id       Int             @id @default(autoincrement())
  id_restaurant Int
  menu_name     String          @db.VarChar(100)
  description   String?
  availability  Boolean?        @default(true)
  category      category_enum
  image         Bytes?
  price         Int
  calories      Int?
  protein       Decimal?        @db.Decimal(5, 2)
  fat           Decimal?        @db.Decimal(5, 2)
  carbohydrates Decimal?        @db.Decimal(5, 2)
  fiber         Decimal?        @db.Decimal(5, 2)
  cholesterol   Decimal?        @db.Decimal(5, 2)
  restaurant    restaurant      @relation(fields: [id_restaurant], references: [id_restaurant], onDelete: Cascade, onUpdate: NoAction)
  order_details order_details[]
}

model offers {
  offer_id         Int                @id @default(autoincrement())
  id_restaurant    Int
  code             String             @unique @db.VarChar(10)
  min_order_amount Decimal?           @db.Decimal(10, 2)
  start_date       DateTime           @db.Date
  end_date         DateTime           @db.Date
  discount_type    discount_type_enum
  discount         Decimal?           @db.Decimal(10, 2)
  restaurant       restaurant         @relation(fields: [id_restaurant], references: [id_restaurant], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order_details {
  order_id    Int
  menu_id     Int
  quantity    Int?
  base_price  Decimal   @db.Decimal(10, 2)
  total_price Decimal   @db.Decimal(10, 2)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  menu        menu      @relation(fields: [menu_id], references: [menu_id], onDelete: Cascade, onUpdate: NoAction)
  orders      orders    @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([order_id, menu_id])
}

model orders {
  order_id      Int                @id @default(autoincrement())
  user_id       Int
  id_restaurant Int
  order_time    DateTime?          @default(now()) @db.Timestamp(6)
  status        order_status_enum? @default(Preparing)
  deliveries    deliveries?
  order_details order_details[]
  restaurant    restaurant         @relation(fields: [id_restaurant], references: [id_restaurant], onDelete: Cascade, onUpdate: NoAction)
  users         users              @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  payments      payments[]
}

model payments {
  user_id        Int
  order_id       Int
  method         payment_method_enum
  payment_status payment_status_enum? @default(pending)
  payment_time   DateTime?            @default(now()) @db.Timestamp(6)
  price          Int
  transaction_id String               @id @db.VarChar(50)
  orders         orders               @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  users          users                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model restaurant {
  id_restaurant      Int      @id @default(autoincrement())
  restaurant_name    String   @unique @db.VarChar(255)
  restaurant_address String   @db.VarChar(255)
  rating             Float?
  menu               menu[]
  offers             offers[]
  orders             orders[]
  review             review[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model review {
  user_id       Int
  id_restaurant Int
  rating        Int
  review_text   String?
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  review_id     Int        @id @default(autoincrement())
  restaurant    restaurant @relation(fields: [id_restaurant], references: [id_restaurant], onDelete: Cascade, onUpdate: NoAction)
  users         users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model support {
  ticket_id         Int                  @id @default(autoincrement())
  user_id           Int
  issue_category    issue_category_enum
  issue_description String
  status            support_status_enum? @default(open)
  created_at        DateTime?            @default(now()) @db.Timestamp(6)
  updated_at        DateTime?            @default(now()) @db.Timestamp(6)
  users             users                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id      Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  email        String?    @unique @db.VarChar(45)
  phone_number String     @unique @db.VarChar(12)
  address      String     @db.VarChar(255)
  password     String     @db.VarChar(255)
  is_admin     Boolean?   @default(false)
  orders       orders[]
  payments     payments[]
  review       review[]
  support      support[]
}

enum agent_status_enum {
  online
  on_delivery @map("on delivery")
  offline
}

enum category_enum {
  veg
  non_veg @map("non-veg")
}

enum delivery_status_enum {
  assigned
  picked_up
  on_the_way
  delivered
  failed
}

enum discount_type_enum {
  Flat
  Percentage
}

enum issue_category_enum {
  order_issue    @map("order issue")
  payment_issue  @map("payment issue")
  delivery_issue @map("delivery issue")
  other
}

enum order_status_enum {
  Preparing
  Out_for_Delivery @map("Out for Delivery")
  Delivered
  Cancelled
}

enum payment_method_enum {
  Credit_Card      @map("Credit Card")
  Debit_Card       @map("Debit Card")
  Netbanking
  UPI
  Cash_on_Delivery @map("Cash on Delivery")
}

enum payment_status_enum {
  pending
  completed
  failed
  refunded
  cod_pending
  cod_collected
}

enum support_status_enum {
  open
  in_progress @map("in progress")
  resolved
  closed
}

enum vehicle_enum {
  bike
  car
  cycle
}
